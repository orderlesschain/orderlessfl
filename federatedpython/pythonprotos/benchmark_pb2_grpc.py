# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import benchmark_pb2 as benchmark__pb2
import shared_pb2 as shared__pb2


class BenchmarkServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteBenchmark = channel.unary_unary(
                '/protos.BenchmarkService/ExecuteBenchmark',
                request_serializer=benchmark__pb2.BenchmarkConfig.SerializeToString,
                response_deserializer=shared__pb2.Empty.FromString,
                )
        self.FaultyNodesNotify = channel.unary_unary(
                '/protos.BenchmarkService/FaultyNodesNotify',
                request_serializer=benchmark__pb2.FaultyNodes.SerializeToString,
                response_deserializer=shared__pb2.Empty.FromString,
                )
        self.ExecutionStatus = channel.unary_unary(
                '/protos.BenchmarkService/ExecutionStatus',
                request_serializer=benchmark__pb2.ExperimentBase.SerializeToString,
                response_deserializer=benchmark__pb2.ExperimentResult.FromString,
                )
        self.GetExperimentResult = channel.unary_stream(
                '/protos.BenchmarkService/GetExperimentResult',
                request_serializer=benchmark__pb2.ExperimentBase.SerializeToString,
                response_deserializer=benchmark__pb2.ReportFile.FromString,
                )
        self.ChangeModeRestart = channel.unary_unary(
                '/protos.BenchmarkService/ChangeModeRestart',
                request_serializer=shared__pb2.OperationMode.SerializeToString,
                response_deserializer=shared__pb2.Empty.FromString,
                )
        self.StopAndGetProfilingResult = channel.unary_stream(
                '/protos.BenchmarkService/StopAndGetProfilingResult',
                request_serializer=shared__pb2.Profiling.SerializeToString,
                response_deserializer=shared__pb2.ProfilingResult.FromString,
                )


class BenchmarkServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteBenchmark(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FaultyNodesNotify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecutionStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperimentResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeModeRestart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopAndGetProfilingResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BenchmarkServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteBenchmark': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteBenchmark,
                    request_deserializer=benchmark__pb2.BenchmarkConfig.FromString,
                    response_serializer=shared__pb2.Empty.SerializeToString,
            ),
            'FaultyNodesNotify': grpc.unary_unary_rpc_method_handler(
                    servicer.FaultyNodesNotify,
                    request_deserializer=benchmark__pb2.FaultyNodes.FromString,
                    response_serializer=shared__pb2.Empty.SerializeToString,
            ),
            'ExecutionStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecutionStatus,
                    request_deserializer=benchmark__pb2.ExperimentBase.FromString,
                    response_serializer=benchmark__pb2.ExperimentResult.SerializeToString,
            ),
            'GetExperimentResult': grpc.unary_stream_rpc_method_handler(
                    servicer.GetExperimentResult,
                    request_deserializer=benchmark__pb2.ExperimentBase.FromString,
                    response_serializer=benchmark__pb2.ReportFile.SerializeToString,
            ),
            'ChangeModeRestart': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeModeRestart,
                    request_deserializer=shared__pb2.OperationMode.FromString,
                    response_serializer=shared__pb2.Empty.SerializeToString,
            ),
            'StopAndGetProfilingResult': grpc.unary_stream_rpc_method_handler(
                    servicer.StopAndGetProfilingResult,
                    request_deserializer=shared__pb2.Profiling.FromString,
                    response_serializer=shared__pb2.ProfilingResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protos.BenchmarkService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BenchmarkService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteBenchmark(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.BenchmarkService/ExecuteBenchmark',
            benchmark__pb2.BenchmarkConfig.SerializeToString,
            shared__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FaultyNodesNotify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.BenchmarkService/FaultyNodesNotify',
            benchmark__pb2.FaultyNodes.SerializeToString,
            shared__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecutionStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.BenchmarkService/ExecutionStatus',
            benchmark__pb2.ExperimentBase.SerializeToString,
            benchmark__pb2.ExperimentResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExperimentResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/protos.BenchmarkService/GetExperimentResult',
            benchmark__pb2.ExperimentBase.SerializeToString,
            benchmark__pb2.ReportFile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeModeRestart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.BenchmarkService/ChangeModeRestart',
            shared__pb2.OperationMode.SerializeToString,
            shared__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopAndGetProfilingResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/protos.BenchmarkService/StopAndGetProfilingResult',
            shared__pb2.Profiling.SerializeToString,
            shared__pb2.ProfilingResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
