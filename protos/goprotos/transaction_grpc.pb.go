// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	GetPublicKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicKeyResponse, error)
	ChangeModeRestart(ctx context.Context, in *OperationMode, opts ...grpc.CallOption) (*Empty, error)
	FailureCommand(ctx context.Context, in *FailureCommandMode, opts ...grpc.CallOption) (*Empty, error)
	StopAndGetProfilingResult(ctx context.Context, in *Profiling, opts ...grpc.CallOption) (TransactionService_StopAndGetProfilingResultClient, error)
	ProcessProposalOrderlessFLStream(ctx context.Context, opts ...grpc.CallOption) (TransactionService_ProcessProposalOrderlessFLStreamClient, error)
	CommitOrderlessFLTransactionStream(ctx context.Context, opts ...grpc.CallOption) (TransactionService_CommitOrderlessFLTransactionStreamClient, error)
	SubscribeProposalResponse(ctx context.Context, in *ProposalResponseEventSubscription, opts ...grpc.CallOption) (TransactionService_SubscribeProposalResponseClient, error)
	SubscribeTransactionResponse(ctx context.Context, in *TransactionResponseEventSubscription, opts ...grpc.CallOption) (TransactionService_SubscribeTransactionResponseClient, error)
	SubscribeNodeTransactions(ctx context.Context, in *TransactionResponseEventSubscription, opts ...grpc.CallOption) (TransactionService_SubscribeNodeTransactionsClient, error)
	GetLatestFederatedModel(ctx context.Context, in *ModelUpdateRequest, opts ...grpc.CallOption) (*ModelUpdateRequest, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) GetPublicKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicKeyResponse, error) {
	out := new(PublicKeyResponse)
	err := c.cc.Invoke(ctx, "/protos.TransactionService/GetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ChangeModeRestart(ctx context.Context, in *OperationMode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.TransactionService/ChangeModeRestart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FailureCommand(ctx context.Context, in *FailureCommandMode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.TransactionService/FailureCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) StopAndGetProfilingResult(ctx context.Context, in *Profiling, opts ...grpc.CallOption) (TransactionService_StopAndGetProfilingResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[0], "/protos.TransactionService/StopAndGetProfilingResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceStopAndGetProfilingResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionService_StopAndGetProfilingResultClient interface {
	Recv() (*ProfilingResult, error)
	grpc.ClientStream
}

type transactionServiceStopAndGetProfilingResultClient struct {
	grpc.ClientStream
}

func (x *transactionServiceStopAndGetProfilingResultClient) Recv() (*ProfilingResult, error) {
	m := new(ProfilingResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionServiceClient) ProcessProposalOrderlessFLStream(ctx context.Context, opts ...grpc.CallOption) (TransactionService_ProcessProposalOrderlessFLStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[1], "/protos.TransactionService/ProcessProposalOrderlessFLStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceProcessProposalOrderlessFLStreamClient{stream}
	return x, nil
}

type TransactionService_ProcessProposalOrderlessFLStreamClient interface {
	Send(*ProposalRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type transactionServiceProcessProposalOrderlessFLStreamClient struct {
	grpc.ClientStream
}

func (x *transactionServiceProcessProposalOrderlessFLStreamClient) Send(m *ProposalRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transactionServiceProcessProposalOrderlessFLStreamClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionServiceClient) CommitOrderlessFLTransactionStream(ctx context.Context, opts ...grpc.CallOption) (TransactionService_CommitOrderlessFLTransactionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[2], "/protos.TransactionService/CommitOrderlessFLTransactionStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceCommitOrderlessFLTransactionStreamClient{stream}
	return x, nil
}

type TransactionService_CommitOrderlessFLTransactionStreamClient interface {
	Send(*Transaction) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type transactionServiceCommitOrderlessFLTransactionStreamClient struct {
	grpc.ClientStream
}

func (x *transactionServiceCommitOrderlessFLTransactionStreamClient) Send(m *Transaction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transactionServiceCommitOrderlessFLTransactionStreamClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionServiceClient) SubscribeProposalResponse(ctx context.Context, in *ProposalResponseEventSubscription, opts ...grpc.CallOption) (TransactionService_SubscribeProposalResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[3], "/protos.TransactionService/SubscribeProposalResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceSubscribeProposalResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionService_SubscribeProposalResponseClient interface {
	Recv() (*ProposalResponse, error)
	grpc.ClientStream
}

type transactionServiceSubscribeProposalResponseClient struct {
	grpc.ClientStream
}

func (x *transactionServiceSubscribeProposalResponseClient) Recv() (*ProposalResponse, error) {
	m := new(ProposalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionServiceClient) SubscribeTransactionResponse(ctx context.Context, in *TransactionResponseEventSubscription, opts ...grpc.CallOption) (TransactionService_SubscribeTransactionResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[4], "/protos.TransactionService/SubscribeTransactionResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceSubscribeTransactionResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionService_SubscribeTransactionResponseClient interface {
	Recv() (*TransactionResponse, error)
	grpc.ClientStream
}

type transactionServiceSubscribeTransactionResponseClient struct {
	grpc.ClientStream
}

func (x *transactionServiceSubscribeTransactionResponseClient) Recv() (*TransactionResponse, error) {
	m := new(TransactionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionServiceClient) SubscribeNodeTransactions(ctx context.Context, in *TransactionResponseEventSubscription, opts ...grpc.CallOption) (TransactionService_SubscribeNodeTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[5], "/protos.TransactionService/SubscribeNodeTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceSubscribeNodeTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionService_SubscribeNodeTransactionsClient interface {
	Recv() (*NodeTransactionResponse, error)
	grpc.ClientStream
}

type transactionServiceSubscribeNodeTransactionsClient struct {
	grpc.ClientStream
}

func (x *transactionServiceSubscribeNodeTransactionsClient) Recv() (*NodeTransactionResponse, error) {
	m := new(NodeTransactionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionServiceClient) GetLatestFederatedModel(ctx context.Context, in *ModelUpdateRequest, opts ...grpc.CallOption) (*ModelUpdateRequest, error) {
	out := new(ModelUpdateRequest)
	err := c.cc.Invoke(ctx, "/protos.TransactionService/GetLatestFederatedModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations should embed UnimplementedTransactionServiceServer
// for forward compatibility
type TransactionServiceServer interface {
	GetPublicKey(context.Context, *Empty) (*PublicKeyResponse, error)
	ChangeModeRestart(context.Context, *OperationMode) (*Empty, error)
	FailureCommand(context.Context, *FailureCommandMode) (*Empty, error)
	StopAndGetProfilingResult(*Profiling, TransactionService_StopAndGetProfilingResultServer) error
	ProcessProposalOrderlessFLStream(TransactionService_ProcessProposalOrderlessFLStreamServer) error
	CommitOrderlessFLTransactionStream(TransactionService_CommitOrderlessFLTransactionStreamServer) error
	SubscribeProposalResponse(*ProposalResponseEventSubscription, TransactionService_SubscribeProposalResponseServer) error
	SubscribeTransactionResponse(*TransactionResponseEventSubscription, TransactionService_SubscribeTransactionResponseServer) error
	SubscribeNodeTransactions(*TransactionResponseEventSubscription, TransactionService_SubscribeNodeTransactionsServer) error
	GetLatestFederatedModel(context.Context, *ModelUpdateRequest) (*ModelUpdateRequest, error)
}

// UnimplementedTransactionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTransactionServiceServer struct {
}

func (UnimplementedTransactionServiceServer) GetPublicKey(context.Context, *Empty) (*PublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedTransactionServiceServer) ChangeModeRestart(context.Context, *OperationMode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeModeRestart not implemented")
}
func (UnimplementedTransactionServiceServer) FailureCommand(context.Context, *FailureCommandMode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailureCommand not implemented")
}
func (UnimplementedTransactionServiceServer) StopAndGetProfilingResult(*Profiling, TransactionService_StopAndGetProfilingResultServer) error {
	return status.Errorf(codes.Unimplemented, "method StopAndGetProfilingResult not implemented")
}
func (UnimplementedTransactionServiceServer) ProcessProposalOrderlessFLStream(TransactionService_ProcessProposalOrderlessFLStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessProposalOrderlessFLStream not implemented")
}
func (UnimplementedTransactionServiceServer) CommitOrderlessFLTransactionStream(TransactionService_CommitOrderlessFLTransactionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CommitOrderlessFLTransactionStream not implemented")
}
func (UnimplementedTransactionServiceServer) SubscribeProposalResponse(*ProposalResponseEventSubscription, TransactionService_SubscribeProposalResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeProposalResponse not implemented")
}
func (UnimplementedTransactionServiceServer) SubscribeTransactionResponse(*TransactionResponseEventSubscription, TransactionService_SubscribeTransactionResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTransactionResponse not implemented")
}
func (UnimplementedTransactionServiceServer) SubscribeNodeTransactions(*TransactionResponseEventSubscription, TransactionService_SubscribeNodeTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNodeTransactions not implemented")
}
func (UnimplementedTransactionServiceServer) GetLatestFederatedModel(context.Context, *ModelUpdateRequest) (*ModelUpdateRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestFederatedModel not implemented")
}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.TransactionService/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetPublicKey(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ChangeModeRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationMode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ChangeModeRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.TransactionService/ChangeModeRestart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ChangeModeRestart(ctx, req.(*OperationMode))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FailureCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailureCommandMode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FailureCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.TransactionService/FailureCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FailureCommand(ctx, req.(*FailureCommandMode))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_StopAndGetProfilingResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Profiling)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).StopAndGetProfilingResult(m, &transactionServiceStopAndGetProfilingResultServer{stream})
}

type TransactionService_StopAndGetProfilingResultServer interface {
	Send(*ProfilingResult) error
	grpc.ServerStream
}

type transactionServiceStopAndGetProfilingResultServer struct {
	grpc.ServerStream
}

func (x *transactionServiceStopAndGetProfilingResultServer) Send(m *ProfilingResult) error {
	return x.ServerStream.SendMsg(m)
}

func _TransactionService_ProcessProposalOrderlessFLStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransactionServiceServer).ProcessProposalOrderlessFLStream(&transactionServiceProcessProposalOrderlessFLStreamServer{stream})
}

type TransactionService_ProcessProposalOrderlessFLStreamServer interface {
	SendAndClose(*Empty) error
	Recv() (*ProposalRequest, error)
	grpc.ServerStream
}

type transactionServiceProcessProposalOrderlessFLStreamServer struct {
	grpc.ServerStream
}

func (x *transactionServiceProcessProposalOrderlessFLStreamServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transactionServiceProcessProposalOrderlessFLStreamServer) Recv() (*ProposalRequest, error) {
	m := new(ProposalRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TransactionService_CommitOrderlessFLTransactionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransactionServiceServer).CommitOrderlessFLTransactionStream(&transactionServiceCommitOrderlessFLTransactionStreamServer{stream})
}

type TransactionService_CommitOrderlessFLTransactionStreamServer interface {
	SendAndClose(*Empty) error
	Recv() (*Transaction, error)
	grpc.ServerStream
}

type transactionServiceCommitOrderlessFLTransactionStreamServer struct {
	grpc.ServerStream
}

func (x *transactionServiceCommitOrderlessFLTransactionStreamServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transactionServiceCommitOrderlessFLTransactionStreamServer) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TransactionService_SubscribeProposalResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProposalResponseEventSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).SubscribeProposalResponse(m, &transactionServiceSubscribeProposalResponseServer{stream})
}

type TransactionService_SubscribeProposalResponseServer interface {
	Send(*ProposalResponse) error
	grpc.ServerStream
}

type transactionServiceSubscribeProposalResponseServer struct {
	grpc.ServerStream
}

func (x *transactionServiceSubscribeProposalResponseServer) Send(m *ProposalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TransactionService_SubscribeTransactionResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionResponseEventSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).SubscribeTransactionResponse(m, &transactionServiceSubscribeTransactionResponseServer{stream})
}

type TransactionService_SubscribeTransactionResponseServer interface {
	Send(*TransactionResponse) error
	grpc.ServerStream
}

type transactionServiceSubscribeTransactionResponseServer struct {
	grpc.ServerStream
}

func (x *transactionServiceSubscribeTransactionResponseServer) Send(m *TransactionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TransactionService_SubscribeNodeTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionResponseEventSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).SubscribeNodeTransactions(m, &transactionServiceSubscribeNodeTransactionsServer{stream})
}

type TransactionService_SubscribeNodeTransactionsServer interface {
	Send(*NodeTransactionResponse) error
	grpc.ServerStream
}

type transactionServiceSubscribeNodeTransactionsServer struct {
	grpc.ServerStream
}

func (x *transactionServiceSubscribeNodeTransactionsServer) Send(m *NodeTransactionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TransactionService_GetLatestFederatedModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetLatestFederatedModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.TransactionService/GetLatestFederatedModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetLatestFederatedModel(ctx, req.(*ModelUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicKey",
			Handler:    _TransactionService_GetPublicKey_Handler,
		},
		{
			MethodName: "ChangeModeRestart",
			Handler:    _TransactionService_ChangeModeRestart_Handler,
		},
		{
			MethodName: "FailureCommand",
			Handler:    _TransactionService_FailureCommand_Handler,
		},
		{
			MethodName: "GetLatestFederatedModel",
			Handler:    _TransactionService_GetLatestFederatedModel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StopAndGetProfilingResult",
			Handler:       _TransactionService_StopAndGetProfilingResult_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProcessProposalOrderlessFLStream",
			Handler:       _TransactionService_ProcessProposalOrderlessFLStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CommitOrderlessFLTransactionStream",
			Handler:       _TransactionService_CommitOrderlessFLTransactionStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeProposalResponse",
			Handler:       _TransactionService_SubscribeProposalResponse_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTransactionResponse",
			Handler:       _TransactionService_SubscribeTransactionResponse_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeNodeTransactions",
			Handler:       _TransactionService_SubscribeNodeTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transaction.proto",
}
