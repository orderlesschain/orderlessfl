// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FederatedServiceClient is the client API for FederatedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FederatedServiceClient interface {
	TrainUpdateModel(ctx context.Context, in *ModelUpdateRequest, opts ...grpc.CallOption) (*ModelUpdateRequest, error)
	ChangeModeRestart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type federatedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFederatedServiceClient(cc grpc.ClientConnInterface) FederatedServiceClient {
	return &federatedServiceClient{cc}
}

func (c *federatedServiceClient) TrainUpdateModel(ctx context.Context, in *ModelUpdateRequest, opts ...grpc.CallOption) (*ModelUpdateRequest, error) {
	out := new(ModelUpdateRequest)
	err := c.cc.Invoke(ctx, "/protos.FederatedService/TrainUpdateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedServiceClient) ChangeModeRestart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.FederatedService/ChangeModeRestart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FederatedServiceServer is the server API for FederatedService service.
// All implementations should embed UnimplementedFederatedServiceServer
// for forward compatibility
type FederatedServiceServer interface {
	TrainUpdateModel(context.Context, *ModelUpdateRequest) (*ModelUpdateRequest, error)
	ChangeModeRestart(context.Context, *Empty) (*Empty, error)
}

// UnimplementedFederatedServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFederatedServiceServer struct {
}

func (UnimplementedFederatedServiceServer) TrainUpdateModel(context.Context, *ModelUpdateRequest) (*ModelUpdateRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainUpdateModel not implemented")
}
func (UnimplementedFederatedServiceServer) ChangeModeRestart(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeModeRestart not implemented")
}

// UnsafeFederatedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FederatedServiceServer will
// result in compilation errors.
type UnsafeFederatedServiceServer interface {
	mustEmbedUnimplementedFederatedServiceServer()
}

func RegisterFederatedServiceServer(s grpc.ServiceRegistrar, srv FederatedServiceServer) {
	s.RegisterService(&FederatedService_ServiceDesc, srv)
}

func _FederatedService_TrainUpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedServiceServer).TrainUpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.FederatedService/TrainUpdateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedServiceServer).TrainUpdateModel(ctx, req.(*ModelUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedService_ChangeModeRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedServiceServer).ChangeModeRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.FederatedService/ChangeModeRestart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedServiceServer).ChangeModeRestart(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FederatedService_ServiceDesc is the grpc.ServiceDesc for FederatedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FederatedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.FederatedService",
	HandlerType: (*FederatedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrainUpdateModel",
			Handler:    _FederatedService_TrainUpdateModel_Handler,
		},
		{
			MethodName: "ChangeModeRestart",
			Handler:    _FederatedService_ChangeModeRestart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "federated.proto",
}
